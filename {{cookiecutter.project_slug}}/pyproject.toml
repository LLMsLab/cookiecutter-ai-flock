[tool.poetry]
name = "{{cookiecutter.package_name}}"
version = "0.1.0"
description = "{{cookiecutter.description}}"
authors = ["{{cookiecutter.author_name}} <{{cookiecutter.author_email}}>"]
license = "Internal Use Only"
readme = "README.md"

[tool.poetry.dependencies]
python = ">=3.10.13,<3.12"
unstructured = { version = "0.10.12", extras = ["pdf"] }
chromadb = "0.4.10"
azure-ai-ml = "1.10.0"
gradio = "3.44.3"
wandb = "0.15.10"
transformers = "4.33.1"
sentence-transformers = "2.2.2"
spacy = "3.6.1"
aiohttp = "3.9.1"
aiosignal = "1.3.1"
aiostream = "0.5.2"
annotated-types = "0.6.0"
anyio = "3.7.1"
async-timeout = "4.0.3"
attrs = "23.1.0"
azure-ai-contentsafety = "1.0.0b1"
azure-ai-formrecognizer = "3.2.0"
azure-common = "1.1.28"
azure-core = "1.29.5"
azure-cosmos = "4.5.0"
azure-identity = "1.12.0"
azure-search-documents = "11.4.0b8"
azure-storage-blob = "12.14.1"
azure-storage-queue = "12.5.0"
beautifulsoup4 = "4.12.0"
blinker = "1.7.0"
blobfile = "2.1.1"
cachetools = "5.3.2"
certifi = "2023.11.17"
cffi = "1.16.0"
chardet = "5.1.0"
charset-normalizer = "3.3.2"
click = "8.1.7"
contourpy = "1.2.0"
cryptography = "41.0.7"
cycler = "0.12.1"
dataclasses-json = "0.5.14"
Deprecated = "1.2.14"
exceptiongroup = "1.2.0"
fake-useragent = "1.1.3"
filelock = "3.13.1"
Flask = "2.3.2"
fonttools = "4.45.1"
frozenlist = "1.4.0"
fsspec = "2023.10.0"
google-api-core = "2.14.0"
google-auth = "2.23.4"
googleapis-common-protos = "1.61.0"
greenlet = "3.0.1"
idna = "3.6"
isodate = "0.6.1"
itsdangerous = "2.1.2"
Jinja2 = "3.1.2"
joblib = "1.3.2"
jsonpatch = "1.33"
jsonpointer = "2.4"
kiwisolver = "1.4.5"
langchain = "0.0.341"
langchain-core = "0.0.6"
langsmith = "0.0.67"
llama-index = "0.8.62"
lxml = "4.9.3"
MarkupSafe = "2.1.3"
marshmallow = "3.20.1"
matplotlib = "3.8.0"
msal = "1.25.0"
msal-extensions = "1.0.0"
msrest = "0.7.1"
multidict = "6.0.4"
mypy-extensions = "1.0.0"
nest-asyncio = "1.5.8"
nltk = "3.8.1"
numexpr = "2.8.7"
numpy = "1.26.2"
oauthlib = "3.2.2"
openai = "0.27.8"
opencensus = "0.11.3"
opencensus-context = "0.1.3"
opencensus-ext-azure = "1.1.9"
packaging = "23.2"
pandas = "2.1.3"
Pillow = "10.1.0"
portalocker = "2.8.2"
prompt-toolkit = "3.0.39"
protobuf = "4.25.1"
psutil = "5.9.6"
pyasn1 = "0.5.1"
pyasn1-modules = "0.3.0"
pycparser = "2.21"
pycryptodomex = "3.19.0"
pydantic = "^1.10.10"
pydantic_core = "2.14.5"
PyJWT = "2.8.0"
pyparsing = "3.1.1"
python-dateutil = "2.8.2"
python-docx = "0.8.11"
python-dotenv = "1.0.0"
pytz = "2023.3.post1"
PyYAML = "6.0.1"
regex = "2023.10.3"
requests = "2.31.0"
requests-oauthlib = "1.3.1"
rsa = "4.9"
seaborn = "0.13.0"
six = "1.16.0"
sniffio = "1.3.0"
soupsieve = "2.5"
SQLAlchemy = "2.0.23"
tenacity = "8.2.3"
tiktoken = "0.5.1"
tqdm = "4.66.1"
typing-inspect = "0.9.0"
typing_extensions = "4.8.0"
tzdata = "2023.3"
urllib3 = "1.26.18"
wcwidth = "0.2.12"
Werkzeug = "3.0.1"
wrapt = "1.16.0"
yarl = "1.9.3"

[tool.poetry.dev-dependencies]
black = { version = "23.7.0", extras = ["jupyter"] }
hydra-core = "1.3.2"
ipykernel = "6.24.0"
mkdocs = "1.5.3"
mkdocs-git-revision-date-localized-plugin = "1.2.2"
mkdocs-material = "9.5.4"
mkdocs-mermaid2-plugin = "1.1.1"
mkdocstrings-python = "1.8.0"
pre-commit = "3.3.3"
pymarkdownlnt = "0.9.13.4"
pytest = "7.4.0"
pytest-benchmark = "4.0.0"
pytest-xdist = "3.3.1"
rope = "1.9.0"
ruff = "0.1.13"
dvc = "3.40.1"

[tool.poetry.group.dev.dependencies]
toml = "^0.10.2"
nbconvert = "^7.8.0"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.black]
line-length = 79
target-version = ['py310']
include = """
(
    ^notebooks/.*\\.ipynb$
  | ^src/.*\\.py$
)
"""

[tool.ruff]
select = [
    # Pyflakes (F) rules
    "F401", # Unused imports
    "F402", # Import shadowed by loop var
    "F403", # `from module import *` used
    "F405", # Name may be undefined, or defined from star imports
    "F601", # Dictionary key literal repeated
    "F602", # Dictionary key variable repeated
    "F621", # Too many expressions in star-unpacking assignment
    "F631", # Assert test is a non-empty tuple
    "F632", # Use `==` to compare constant literals
    "F701", # `break` outside loop
    "F702", # `continue` not properly in loop
    "F704", # Yield statement outside of a function
    "F706", # `return` statement outside of a function/method
    "F707", # `except` block not the last exception handler
    "F722", # Syntax error in forward annotation
    "F811", # Redefinition of unused variable from line
    "F821", # Undefined name
    "F841", # Local variable is assigned to but never used

    # pycodestyle (E, W) rules
    "E101", # Indentation contains mixed spaces and tabs
    "E111", # Indentation is not a multiple of four
    "E112", # Expected an indented block
    "E113", # Unexpected indentation
    "E114", # Indentation is not a multiple of four (comment)
    "E115", # Expected an indented block (comment)
    "E116", # Unexpected indentation (comment)
    "E117", # Over-indented (comment)
    "E201", # Whitespace after '(' or '['
    "E202", # Whitespace before ')' or ']'
    "E203", # Whitespace before ':'
    "E211", # Whitespace before '(' or '['
    "E225", # Missing whitespace around operator
    "E231", # Missing whitespace after ',', ';', or ':'
    "E251", # Unexpected spaces around keyword / parameter equals
    "E261", # At least two spaces before inline comment
    "E262", # Inline comment should start with '# '
    "E265", # Block comment should start with '# '
    "E266", # Too many leading '#' for block comment
    "E271", # Multiple spaces after keyword
    "E272", # Multiple spaces before keyword
    "E273", # Tab after keyword
    "E274", # Tab before keyword
    "E275", # Missing whitespace after keyword
    "E401", # Multiple imports on one line
    "E402", # Module level import not at top of file
    "E501", # Line too long
    "E711", # Comparison to None should be 'expr is None'
    "E712", # Comparison to True should be 'if cond is True:' or 'if cond:'
    "E713", # Test for membership should be 'not in'
    "E714", # Test for object identity should be 'is not'
    "E721", # Do not compare types, use 'isinstance()'
    "E722", # Do not use bare 'except'
    "E731", # Do not assign a lambda expression, use a def

    # isort (I) rules
    "I001", # Import block is un-sorted or un-formatted
    "I002", # Missing required import

    # pep8-naming (N) rules
    "N801", # Class name should use CapWords convention
    "N802", # Function name should be lowercase
    "N803", # Argument name should be lowercase
    "N804", # First argument of a class method should be named 'cls'
    "N805", # First argument of a method should be named 'self'
    "N806", # Variable in function should be lowercase

    # pydocstyle (D) rules
    "D100", # Missing docstring in public module
    "D101", # Missing docstring in public class
    "D102", # Missing docstring in public method
    "D103", # Missing docstring in public function
    "D104", # Missing docstring in public package
    "D105", # Missing docstring in magic method
    "D106", # Missing docstring in public nested class
    "D107", # Missing docstring in __init__
]

# Decrease the maximum line length to 79 characters.
line-length = 79
include = ["*.py", "*.pyi", "**/pyproject.toml", "*.ipynb"]

[tool.pymarkdown]
disable-rules = ["MD046"]